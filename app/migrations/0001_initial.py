# Generated by Django 3.1.3 on 2021-05-13 13:58

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AllClassGrade',
            fields=[
                ('test', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='考试')),
                ('Math1', models.PositiveIntegerField(blank=True, null=True, verbose_name='数学')),
                ('Chinese1', models.PositiveIntegerField(blank=True, null=True, verbose_name='语文')),
                ('English1', models.PositiveIntegerField(blank=True, null=True, verbose_name='英语')),
                ('Physics1', models.PositiveIntegerField(blank=True, null=True, verbose_name='物理')),
                ('Biology1', models.PositiveIntegerField(blank=True, null=True, verbose_name='生物')),
                ('Chemistry1', models.PositiveIntegerField(blank=True, null=True, verbose_name='化学')),
                ('TOTAL', models.PositiveIntegerField(blank=True, null=True, verbose_name='总分')),
            ],
        ),
        migrations.CreateModel(
            name='AllTest',
            fields=[
                ('Class', models.CharField(max_length=15, verbose_name='班级')),
                ('ClassTest', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='班级考试')),
                ('Math2', models.PositiveIntegerField(blank=True, null=True, verbose_name='数学')),
                ('Chinese2', models.PositiveIntegerField(blank=True, null=True, verbose_name='语文')),
                ('English2', models.PositiveIntegerField(blank=True, null=True, verbose_name='英语')),
                ('Physics2', models.PositiveIntegerField(blank=True, null=True, verbose_name='物理')),
                ('Biology2', models.PositiveIntegerField(blank=True, null=True, verbose_name='生物')),
                ('Chemistry2', models.PositiveIntegerField(blank=True, null=True, verbose_name='化学')),
                ('total', models.PositiveIntegerField(blank=True, null=True, verbose_name='总分')),
                ('TesT', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.allclassgrade')),
            ],
        ),
        migrations.CreateModel(
            name='ClassGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studentNum', models.CharField(max_length=7, verbose_name='学号')),
                ('CLASS', models.CharField(max_length=15, verbose_name='班级')),
                ('STName', models.CharField(max_length=20, verbose_name='姓名')),
                ('Math3', models.PositiveIntegerField(blank=True, null=True, verbose_name='数学')),
                ('Chinese3', models.PositiveIntegerField(blank=True, null=True, verbose_name='语文')),
                ('English3', models.PositiveIntegerField(blank=True, null=True, verbose_name='英语')),
                ('Physics3', models.PositiveIntegerField(blank=True, null=True, verbose_name='物理')),
                ('Biology3', models.PositiveIntegerField(blank=True, null=True, verbose_name='生物')),
                ('Chemistry3', models.PositiveIntegerField(blank=True, null=True, verbose_name='化学')),
                ('Total', models.PositiveIntegerField(blank=True, null=True, verbose_name='总分')),
                ('TEST', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.alltest')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('TeacherID', models.CharField(max_length=7, verbose_name='员工号')),
                ('TeacherName', models.CharField(max_length=20, verbose_name='员工姓名')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
